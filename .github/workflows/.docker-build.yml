# name: Build and Push Docker Image
# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Image version (leave empty for auto-increment, or specify like 0001, 0002)'
#         required: false
#         default: ''
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#       - name: Create .env file with PAT
#         run: |
#           echo "GITHUB_PAT=${{ secrets.GITHUB_TOKEN }}" > ../.env
#       - name: Build and push using script
#         run: |
#           chmod +x ./build-push.sh
#           if [ -n "${{ github.event.inputs.version }}" ]; then
#             ./build-push.sh "${{ github.event.inputs.version }}"
#           else
#             ./build-push.sh
#           fi
#       - name: Cleanup old versions (keep last 8)
#         run: |
#           REPO_NAME="alumni-portal"
#           # Get all versions sorted by creation date (newest first)
#           VERSIONS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Accept: application/vnd.github+json" \
#             "https://api.github.com/users/web-iiitkota/packages/container/$REPO_NAME/versions" | \
#             jq -r 'sort_by(.created_at) | reverse | .[8:] | .[].id')
          
#           # Delete versions beyond the 8 most recent
#           for version_id in $VERSIONS; do
#             echo "Deleting version ID: $version_id"
#             curl -X DELETE -s \
#               -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#               -H "Accept: application/vnd.github+json" \
#               "https://api.github.com/users/web-iiitkota/packages/container/$REPO_NAME/versions/$version_id" || true
#           done
